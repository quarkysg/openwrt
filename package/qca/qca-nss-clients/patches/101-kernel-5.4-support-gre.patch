--- a/eogremgr/nss_eogremgr.c
+++ b/eogremgr/nss_eogremgr.c
@@ -19,6 +19,7 @@
  *	NSS EOGRE manager
  */
 
+#include <linux/of.h>
 #include <nss_api_if.h>
 #include <nss_cmn.h>
 #include "nss_connmgr_gre_public.h"
--- a/gre/nss_connmgr_gre.c
+++ b/gre/nss_connmgr_gre.c
@@ -74,7 +74,7 @@ static bool nss_connmgr_gre_is_gre(struc
 {
 	if ((dev->type == ARPHRD_IPGRE) ||
 	      (dev->type == ARPHRD_IP6GRE) || ((dev->type == ARPHRD_ETHER) &&
-	      (dev->priv_flags & (IFF_GRE_V4_TAP | IFF_GRE_V6_TAP)))) {
+	      (dev->priv_flags_qca_ecm & (IFF_QCA_ECM_GRE_V4_TAP | IFF_QCA_ECM_GRE_V6_TAP)))) {
 		return true;
 	}
 
@@ -183,7 +183,7 @@ static int nss_connmgr_gre_dev_init(stru
 		u64_stats_init(&stats->syncp);
 	}
 
-	if ((dev->priv_flags & IFF_GRE_V4_TAP) || (dev->type == ARPHRD_IPGRE)) {
+	if ((dev->priv_flags_qca_ecm & IFF_QCA_ECM_GRE_V4_TAP) || (dev->type == ARPHRD_IPGRE)) {
 		dev->needed_headroom = sizeof(struct iphdr) + sizeof(struct ethhdr) + MAX_WIFI_HEADROOM + append;
 		dev->mtu = ETH_DATA_LEN - sizeof(struct iphdr) - append;
 		dev->features |= NETIF_F_NETNS_LOCAL | NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_HIGHDMA;
@@ -264,7 +264,7 @@ fail:
  * nss_connmgr_gre_dev_stats64()
  *	Netdev ops function to retrieve stats.
  */
-struct rtnl_link_stats64 *nss_connmgr_gre_dev_stats64(struct net_device *dev,
+void nss_connmgr_gre_dev_stats64(struct net_device *dev,
 						struct rtnl_link_stats64 *tot)
 {
 	uint64_t rx_packets, rx_bytes, tx_packets, tx_bytes;
@@ -297,8 +297,6 @@ struct rtnl_link_stats64 *nss_connmgr_gr
 		tot->rx_dropped = dev->stats.rx_dropped;
 		tot->tx_dropped = dev->stats.tx_dropped;
 	}
-
-	return tot;
 }
 
 /*
@@ -487,7 +485,7 @@ static int32_t nss_connmgr_gre_prepare_c
 {
 	struct nss_gre_config_msg *cmsg = &req->msg.cmsg;
 
-	if ((dev->type == ARPHRD_ETHER) && (dev->priv_flags & IFF_GRE_V4_TAP)) {
+	if ((dev->type == ARPHRD_ETHER) && (dev->priv_flags_qca_ecm & IFF_QCA_ECM_GRE_V4_TAP)) {
 		cmsg->mode = NSS_GRE_MODE_TAP;
 		cmsg->ip_type = NSS_GRE_IP_IPV4;
 		if (enable_unalign) {
@@ -496,7 +494,7 @@ static int32_t nss_connmgr_gre_prepare_c
 		return nss_connmgr_gre_v4_get_config(dev, req, next_dev, hold);
 	}
 
-	if ((dev->type == ARPHRD_ETHER) && (dev->priv_flags & IFF_GRE_V6_TAP)) {
+	if ((dev->type == ARPHRD_ETHER) && (dev->priv_flags_qca_ecm & IFF_QCA_ECM_GRE_V6_TAP)) {
 		cmsg->mode = NSS_GRE_MODE_TAP;
 		cmsg->ip_type = NSS_GRE_IP_IPV6;
 		if (enable_unalign) {
@@ -775,10 +773,10 @@ static struct net_device *__nss_connmgr_
 		nss_connmgr_gre_tap_setup(dev);
 
 		if (cfg->is_ipv6) {
-			dev->priv_flags |= IFF_GRE_V6_TAP;
+			dev->priv_flags_qca_ecm |= IFF_QCA_ECM_GRE_V6_TAP;
 			ret = nss_connmgr_gre_v6_set_config(dev, cfg);
 		} else {
-			dev->priv_flags |= IFF_GRE_V4_TAP;
+			dev->priv_flags_qca_ecm |= IFF_QCA_ECM_GRE_V4_TAP;
 			ret = nss_connmgr_gre_v4_set_config(dev, cfg);
 		}
 		break;
--- a/gre/nss_connmgr_gre_v6.c
+++ b/gre/nss_connmgr_gre_v6.c
@@ -46,7 +46,7 @@ static struct net_device *nss_connmgr_gr
 	struct net_device *dev;
 
 	memcpy(ipv6_addr.s6_addr, dest_ip, 16);
-	rt = rt6_lookup(&init_net, &ipv6_addr, NULL, 0, 0);
+	rt = rt6_lookup(&init_net, &ipv6_addr, NULL, 0, NULL, 0);
 	if (!rt) {
 		return NULL;
 	}
@@ -92,7 +92,7 @@ static int nss_connmgr_gre_v6_get_mac_ad
 	/*
 	 * Find dest MAC address
 	 */
-	rt = rt6_lookup(&init_net, &dst_addr, NULL, 0, 0);
+	rt = rt6_lookup(&init_net, &dst_addr, NULL, 0, NULL, 0);
 	if (!rt) {
 		nss_connmgr_gre_warning("Unable to find route lookup for %pI6", dest_ip);
 		return GRE_ERR_NEIGH_LOOKUP;
@@ -117,7 +117,7 @@ static int nss_connmgr_gre_v6_get_mac_ad
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 4, 0))
 		ndisc_send_ns(local_dev, neigh, &dst_addr, &mc_dst_addr, &src_addr);
 #else
-		ndisc_send_ns(local_dev, &dst_addr, &mc_dst_addr, &src_addr);
+		ndisc_send_ns(local_dev, &dst_addr, &mc_dst_addr, &src_addr, 0);
 #endif
 		msleep(2000);
 
@@ -125,7 +125,7 @@ static int nss_connmgr_gre_v6_get_mac_ad
 		 * Release hold on existing route entry, and find the route entry again
 		 */
 		ip6_rt_put(rt);
-		rt = rt6_lookup(&init_net, &dst_addr, NULL, 0, 0);
+		rt = rt6_lookup(&init_net, &dst_addr, NULL, 0, NULL, 0);
 		if (!rt) {
 			nss_connmgr_gre_warning("Unable to find route lookup for %pI6\n", dest_ip);
 			return GRE_ERR_NEIGH_LOOKUP;
